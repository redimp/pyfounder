#!/usr/bin/env python3

"""
 python ../../pyfounder/pyfounder-discovery-tool.py >/dev/null && \ 
 PYFOUND_SERVER=http://127.0.0.1:5000/ ./pyfounder-discover -d
"""

import sys
import time
import os
import re
import requests
from subprocess import getstatusoutput

def pyfounder_from_cmdline_or_env():
    try:
        pyfounder_server = os.environ["PYFOUNDER_SERVER"]
    except KeyError:
        pyfounder_server = None
    else:
        return pyfounder_server

    try:
        with open('/proc/cmdline','r') as f:
            cmdline = f.read()
    except:
        cmdline = ''
    try:
        pyfounder_server = re.findall("PYFOUNDER_SERVER=(\S+)",cmdline)[0]
    except IndexError:
        return None
    return pyfounder_server

def fix_url(url):
    if url is None or len(url)<1:
        return url
    return url.rstrip('/')

def run_discovery(url):
    # fetch the discovery script
    r = requests.get("{}/fetch-discovery".format(url))
    r.raise_for_status()
    filename = "./pyfounder-discovery-tool.py"
    with open(filename, 'w') as f:
        f.write(r.text)
    # execute script
    status, output = getstatusoutput("/usr/bin/env python {}".format(filename))
    if status == 0:
        r = requests.post("{}/discovery-report".format(url), data={'data':output})
        r.raise_for_status()
        return r.text
    print(output)
    raise RuntimeError

if __name__ == "__main__":
    in_development = "-d" in sys.argv[1:]
    fetch_failed = False
    url = pyfounder_from_cmdline_or_env()
    while True:
        # search for pyfounder server
        if fetch_failed or url is None:
            # prompt user
            if url is not None:
                url = input("Url [{}]:".format(url)) or url
            else:
                url = input("Url:") or None
            if not url or url is None:
                print("Please enter an URL to the pyfounder server!")
                continue
        url = fix_url(url)
        # check if there is an pyfounder behind the url
        try:
            r = requests.get("{}/version".format(url))
            r.raise_for_status()
            if re.match("pyfounder \d+\.\d+.*", r.text):
                print("{} connected at {}".format(r.text, r.url))
                break
        except:
            print("Error: Failed to connect to {}".format(url))
            # TODO more verbose
            fetch_failed = True
    # url is set and a pyfounder server replied.
    id = run_discovery(url)
    try:
        while True:
            r = requests.get("{}/discovery-remote-control/{}".format(url,id))
            r.raise_for_status()
            remote_control = r.text
            print(remote_control)
            if remote_control == "wait":
                time.sleep(10)
            elif remote_control == "discover":
                id = run_discovery(url)
            elif remote_control == "reboot":
                # TODO log
                for i in range(10,0,-1):
                    print("Will reboot in {} seconds ...".format(i))
                    time.sleep(1)
                if in_development:
                    print("Quit instead of reboot, due to in_development.")
                    break
                else:
                    status, output = getstatusoutput("reboot")
            elif remote_control == "quit":
                break
    except KeyboardInterrupt:
        pass



# vim: set ts=8 sts=2 sw=2 et ai"
